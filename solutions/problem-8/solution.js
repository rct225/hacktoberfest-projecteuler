// https://projecteuler.net/problem=8
// The four adjacent digits in the 1000-digit number that
//  have the greatest product are 9 x 9 x 8 x 9 = 5832.
//
// 73167176531330624919225119674426574742355349194934
// 96983520312774506326239578318016984801869478851843
// 85861560789112949495459501737958331952853208805511
// 12540698747158523863050715693290963295227443043557
// 66896648950445244523161731856403098711121722383113
// 62229893423380308135336276614282806444486645238749
// 30358907296290491560440772390713810515859307960866
// 70172427121883998797908792274921901699720888093776
// 65727333001053367881220235421809751254540594752243
// 52584907711670556013604839586446706324415722155397
// 53697817977846174064955149290862569321978468622482
// 83972241375657056057490261407972968652414535100474
// 82166370484403199890008895243450658541227588666881
// 16427171479924442928230863465674813919123162824586
// 17866458359124566529476545682848912883142607690042
// 24219022671055626321111109370544217506941658960408
// 07198403850962455444362981230987879927244284909188
// 84580156166097919133875499200524063689912560717606
// 05886116467109405077541002256983155200055935729725
// 71636269561882670428252483600823257530420752963450
//
// Find the thirteen adjacent digits in the 1000-digit
//  number that have the greatest product.
//
//
// findProduct function takes a string and returns
//  the product of every digit
const findProduct = numString => {
    let product = 1;
    for (let index = 0; index < numString.length; index++ ) {
        product = product * Number(numString[index]);
      }
    return product;
  };

let bigNum = "73167176531330624919225119674426574742355349194934";
bigNum += "96983520312774506326239578318016984801869478851843";
bigNum += "85861560789112949495459501737958331952853208805511";
bigNum += "12540698747158523863050715693290963295227443043557";
bigNum += "66896648950445244523161731856403098711121722383113";
bigNum += "62229893423380308135336276614282806444486645238749";
bigNum += "30358907296290491560440772390713810515859307960866";
bigNum += "70172427121883998797908792274921901699720888093776";
bigNum += "65727333001053367881220235421809751254540594752243";
bigNum += "52584907711670556013604839586446706324415722155397";
bigNum += "53697817977846174064955149290862569321978468622482";
bigNum += "83972241375657056057490261407972968652414535100474";
bigNum += "82166370484403199890008895243450658541227588666881";
bigNum += "16427171479924442928230863465674813919123162824586";
bigNum += "17866458359124566529476545682848912883142607690042";
bigNum += "24219022671055626321111109370544217506941658960408";
bigNum += "07198403850962455444362981230987879927244284909188";
bigNum += "84580156166097919133875499200524063689912560717606";
bigNum += "05886116467109405077541002256983155200055935729725";
bigNum += "71636269561882670428252483600823257530420752963450";

const bigNumLength = bigNum.length;

// variable to hold the current maximum value of the 13 adjacent digits
let currentMax = 0;

// number of characters in sliding window of digits
// problem calls for 13 but could adjust for other candidate lengths
const digitLength = 13;

// set the current_max to the product of last 13 digit string
// since you don't check it in the loop
current_max = findProduct(bigNum.slice(-digitLength));

// step through big_num digits in n-step slices (n is 13 for now)
// find the product of the digits in the n-digit number and
// compare to current maxium product and update if new product is larger
// than current maximum product
for (let digitIndex = 0; digitIndex < bigNumLength - digitLength; digitIndex++) {
  let product = findProduct(bigNum.slice(digitIndex, digitIndex + digitLength));
  if (product > currentMax) {
    currentMax = product;
  }
}

console.log(currentMax)
